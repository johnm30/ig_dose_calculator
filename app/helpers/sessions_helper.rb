module SessionsHelper

  # Logs in the given user.
  def log_in(user)
    session[:user_id] = user.id
  end

  # The "internal" remember method within the declaration below is a class method for user that creates a
  # remember_token and stores its digest(hash) in the database

  # Cookies stores user.id in a cookie, permanent makes it stored for 20 years
  # and signed encrypts the user id.

  # Cookies also stores the undigested remember_token. The remember_token variable
  # was generated by user.remember and was set as an instance variable on the
  # user object (self) by attr_accessor so could be used here

  # :user_id is a symbol to label the cookie variable. user.id is like .id behaving as a method
  # set I think by Active Record because it is the first column of the database, ie the id column,
  # like :name and :email set manually by attr:accessor.

  def remember(user)
    user.remember
    cookies.permanent.signed[:user_id] = user.id
    cookies.permanent[:remember_token] = user.remember_token
  end

  # Returns true if the given user is the current user.
  def current_user?(user)
    user == current_user
  end

  # Returns the current logged-in user (if any).

  # If a value in temporary store (session), assigns that value to a different
  # user_id variable, a local one.
  # and returns true to set a current user variable from the user database,
  # otherwise returns false so evaluates the else part.
  # In else part, if a cookie present on the computer for that :user_id, then set into
  # local user_id and returns true to go to the next line.
  # The user is then set by retrieving from the database as above but
  # also authenticated by checking the current remember token of the computer's cookie
  # with the digest of the remember-token created and put in the app's database
  # when logging in.

  # So the cookie part will work if closed the browser and shut the PC
  # without logging out. if logged out, then will return false, there will
  # be no current_user and invitation to log in.

  def current_user
    if (user_id = session[:user_id])
      @current_user ||= User.find_by(id: user_id)
    elsif (user_id = cookies.signed[:user_id])
      user = User.find_by(id: user_id)
      # if user && user.authenticated?(cookies[:remember_token])
      # Above line is generalised below because authenticated can be used for
      # remember tokens or activate tokens - in this case use the symbol
      # :remember in the argument to indicate the former.
      if user && user.authenticated?(:remember, cookies[:remember_token])
        log_in user
        @current_user = user
      end
    end
  end

  # Returns true if the user is logged in, false otherwise.
  def logged_in?
    !current_user.nil?
  end

  def forget(user)
    user.forget
    cookies.delete(:user_id)
    cookies.delete(:remember_token)
  end

  # Logs out the current user.
  def log_out
    forget(current_user)
    session.delete(:user_id)
    @current_user = nil
  end

  # Redirects to stored location (or to the default).
  # The location is stored in the temporary cookie accessed by the session method
  #  under the key :forwarding_url

  def redirect_back_or(default)
    redirect_to(session[:forwarding_url] || default)

    # do this otherwise all subsequent login attempts would also go to edit user
    # instead of the default show user. (The redirect doesn't actually happen
    # until the end of the method so the line below still runs)
    session.delete(:forwarding_url)
  end

  # Stores the URL trying to be accessed.
  # The request method gets the url of the requested page
  # The store_location method is called from the private logged_in_user function
  # defined in users_controller, when checking as part of a before action for edit
  # or update if a user is logged in. If they are not logged in, instead of
  # dumping them back to show user when they do log in, they are permitted to go
  # to the page they originally wanted eg edit or update.
  def store_location
    session[:forwarding_url] = request.original_url if request.get?
  end
end
